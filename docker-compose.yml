version: "3"
services:
  app:
    build: .
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./:/go/src/app
    ports:
      - 8080:8080
    environment:
      MYSQL_DATABASE: go_app_dev
      MYSQL_HOST: dockerMySQL  # 追加!!
      MYSQL_USER: docker
      MYSQL_PASSWORD: password

  db:
    image: mysql:5.7
    container_name: dockerMySQL  # 追加!!
    ports:
      - 3307:3306
    environment:
      MYSQL_DATABASE: go_app_dev
      MYSQL_USER: docker
      MYSQL_PASSWORD: password
      MYSQL_ROOT_PASSWORD: password
    healthcheck:
            test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"]
            timeout: 20s
            retries: 10




# version: '3.7'

# services:
#   db:
#     container_name: "new_test_db"
#     platform: linux/x86_64
#     build:
#       context: .
#       dockerfile: db.Dockerfile
#     networks:
#       - default
#     restart: always
#     ports:
#       # <Port exposed> : < MySQL Port running inside container>
#       - "3307:3306"
#     # setting some env vars to create the DB
#     environment:
#       MYSQL_RANDOM_ROOT_PASSWORD: "secret"
#       MYSQL_DATABASE: "test"
#       MYSQL_USER: "tester"
#       MYSQL_PASSWORD: "secret"
#       # OR if you want to use "root" as the user, just these two lines
#       # MYSQL_ROOT_PASSWORD: ${DATABASE_PASSWORD}
#       # MYSQL_DATABASE: ${DATABASE_NAME}

#     # we mount a data volume to make sure we don't lose data
#     volumes:
#       - sql_data:/var/lib/mysql
#     command: --default-authentication-plugin=mysql_native_password
#   api:
#     container_name:  "new_test_api"
#     # we want to use the image which is build from our Dockerfile
#     build:
#       context: .
#       dockerfile: api.Dockerfile
#     ports:
#       - "8080:8080"
#     environment:
#       MYSQL_HOST: "new_test_db"
#       MYSQL_DATABASE: "test"
#       MYSQL_USER: "tester"
#       MYSQL_PASSWORD: "secret"
#     # we are depending on the mysql backend
#     depends_on:
#       - db
#     links:
#       - "db:database"
#     # We mount the working dir into the container, handy for development
#     # This is what makes the hot reloading work inside of a Docker container
#     volumes:
#       - .:/app/

# networks:
#   default:
# volumes:
#   sql_data:
# version: '3.7'

# services:
#   db:
#     image: mysql:8.0.23
#     ports:
#         - "33061:3306"
#     command: --init-file /data/application/init.sql
#     volumes:
#         - ./init.sql:/data/application/init.sql
#     environment:
#         MYSQL_ROOT_PASSWORD: secret
#         MYSQL_DATABASE: homestead
#         MYSQL_USER: tester
#         MYSQL_PASSWORD: secret
#   api:
#     # we want to use the image which is build from our Dockerfile
#     build:
#       context: .
#       dockerfile: api.Dockerfile
#     ports:
#       - "8080:8080"
#     # we are depending on the mysql backend
#     depends_on:
#       - db
#     # We mount the working dir into the container, handy for development
#     # This is what makes the hot reloading work inside of a Docker container
#     volumes:
#       - .:/app/

# networks:
#   default:
# volumes:
#   mysql_data:

# version: '3'
# services:
#   app:
#     build:
#       context: ./
#     volumes:
#       - .:/go/src/app:rw
#     ports:
#       - "8080:8081"
#     container_name: my-go-app
#     restart: on-failure
#   db:
#     image: mysql:latest
#     ports:
#       - 3305:3306
#     environment:
#       MYSQL_ROOT_PASSWORD: "${MYSQL_ROOT_PASSWORD}"
#       MYSQL_USER: "${MYSQL_USER}"
#       MYSQL_PASSWORD: "${MYSQL_PASSWORD}"
#       MYSQL_DATABASE: "${MYSQL_DATABASE}"
#     container_name: my_go_app_db
#     command:
#       - --default-authentication-plugin=mysql_native_password


















# version: '3.7'

# services:
#   web:
#     build:
#       context: .
#       dockerfile: ./app.dockerfile
#     ports:
#       - 8080:8080
#     volumes:
#       - .:/golang-docker
#     depends_on:
#       - database
#     container_name: 'golang-docker-web'
#     environment:
#       - 'DB_PORT=3307'
#       - 'DB_HOST=database'
#   database:
#     image: mysql:5.7.36
#     environment: 
#       MYSQL_RANDOM_ROOT_PASSWORD: "secret"
#       MYSQL_DATABASE: "test_two"
#       MYSQL_USER: "test_user"
#       MYSQL_PASSWORD: "secret"
#     container_name: golang-docker-db
#     ports: 
#       - "3307:3306"
#     volumes:
#       - database_mysql:/var/lib/mysql
 
 
# volumes:
#   database_mysql:                   # Uncomment this when using mysql.


# version: '3.7'

# services:
#   db:
#     container_name: "test_db"
#     platform: linux/x86_64
#     build:
#       context: .
#       dockerfile: db.Dockerfile
#     networks:
#       - default
#     restart: always
#     ports:
#       # <Port exposed> : < MySQL Port running inside container>
#       - "3307:3306"
#     # setting some env vars to create the DB
#     environment:
#       MYSQL_ROOT_PASSWORD: "secret"
#       MYSQL_DATABASE: "test"
#       MYSQL_USER: "tester"
#       MYSQL_PASSWORD: "secret"
#       # OR if you want to use "root" as the user, just these two lines
#       # MYSQL_ROOT_PASSWORD: ${DATABASE_PASSWORD}
#       # MYSQL_DATABASE: ${DATABASE_NAME}

#     # we mount a data volume to make sure we don't lose data
#     volumes:
#       - mysql_data:/var/lib/mysql
#     command: --default-authentication-plugin=mysql_native_password
#   api:
#     container_name:  "test_api"
#     # we want to use the image which is build from our Dockerfile
#     build:
#       context: .
#       dockerfile: api.Dockerfile
#     ports:
#       - "8080:8080"
#     # we are depending on the mysql backend
#     depends_on:
#       - db
#     # We mount the working dir into the container, handy for development
#     # This is what makes the hot reloading work inside of a Docker container
#     volumes:
#       - .:/app/

# networks:
#   default:
# volumes:
#   mysql_data: